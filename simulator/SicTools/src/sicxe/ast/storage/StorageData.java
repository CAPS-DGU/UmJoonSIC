package sicxe.ast.storage;

import sicxe.asm.Key;
import sicxe.asm.Location;
import sicxe.ast.data.Data;
import sicxe.ast.directives.Directive;
import sicxe.common.Mnemonic;

/**
 * TODO: write a short description
 *
 * @author jure
 */
public class StorageData extends Directive {

    public final Data data;             // data-initializer operand
    public final boolean isLiteral;     // was generated by literal
    public static final Key<String> DATA = Key.of("data");

    public StorageData(Location loc, String label, Location labelLoc,
                       Mnemonic mnemonic, Location mnemonicLoc,
                       Data data, Location dataLoc,
                       boolean isLiteral) {
        super(loc, label, labelLoc, mnemonic, mnemonicLoc);
        this.data = data;
        this.isLiteral = isLiteral;
        putLoc(DATA, dataLoc);
    }

    public StorageData(Location loc, String label, Location labelLoc,
                       Mnemonic mnemonic, Location mnemonicLoc,
                       Data data, Location dataLoc) {
        this(loc, label, labelLoc, mnemonic, mnemonicLoc, data, dataLoc, false);
    }

    public boolean equals(StorageData that) {
        return data.equals(that.data);
    }

    @Override
    public String nameToString() {
        return (isLiteral ? "=" : "") + mnemonic.name;
    }

    @Override
    public String operandToString() {
        return data.toString();
    }

    @Override
    public int size() {
        return data.size();
    }

    @Override
    public void emitRawCode(byte[] data, int loc) {
        this.data.emit(data, loc);
    }

}
