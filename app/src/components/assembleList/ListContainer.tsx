// src/components/editor/ListContainer.tsx
import React, { useState, useEffect } from 'react';
import { useEditorTabStore } from '@/stores/EditorTabStore';
import TabBar from '../editor/TabBar';
import List from './List';

// Define the type for a row in the list view
export interface ListViewItem {
  addressHex: string;
  rawCodeHex: string;
  rawCodeBinary: string;
  label: string;
  instr: string;
  instrHex: string;
  instrBin: string; // New: instruction binary
  nixbpe: string;
  operand: string;
  comment: string;
  labelWidth: number;
  nameWidth: number;
  isCommentRow: boolean;
}

const dummyJsonData = {
  listViewArray: [
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: 'func',
      instr: 'START',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '0',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTREF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'ref1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTREF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'ref2',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment: 'This is a comment line that should span the entire row for better readability.',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '00000',
      rawCodeHex: '03100000',
      rawCodeBinary: '00000011 00010000 00000000 00000000',
      label: '',
      instr: '+LDA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'ref1',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '00004',
      rawCodeHex: '190005  ',
      rawCodeBinary: '00011001 00000000 00000101',
      label: '',
      instr: 'ADD',
      instrHex: '0x18',
      instrBin: '000110',
      nixbpe: '010000',
      operand: '#5',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00007',
      rawCodeHex: '0F100000',
      rawCodeBinary: '00001111 00010000 00000000 00000000',
      label: '',
      instr: '+STA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'ref1',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '0000B',
      rawCodeHex: '4B100000',
      rawCodeBinary: '01001011 00010000 00000000 00000000',
      label: '',
      instr: '+JSUB',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'ref2',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '0000F',
      rawCodeHex: '4F0000  ',
      rawCodeBinary: '01001111 00000000 00000000',
      label: '',
      instr: 'RSUB',
      instrHex: '0x4C',
      instrBin: '010011',
      nixbpe: '110000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: 'ref2',
      instr: 'CSECT',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTDEF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'ref1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTREF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'data1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTREF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'data2',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTREF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'data3',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment: 'Another example of a comment line.',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '00000',
      rawCodeHex: '03100000',
      rawCodeBinary: '00000011 00010000 00000000 00000000',
      label: '',
      instr: '+LDA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'data1',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '00004',
      rawCodeHex: '190005  ',
      rawCodeBinary: '00011001 00000000 00000101',
      label: '',
      instr: 'ADD',
      instrHex: '0x18',
      instrBin: '000110',
      nixbpe: '010000',
      operand: '#5',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00007',
      rawCodeHex: '0F100000',
      rawCodeBinary: '00001111 00010000 00000000 00000000',
      label: '',
      instr: '+STA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'data1',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '0000B',
      rawCodeHex: '03100000',
      rawCodeBinary: '00000011 00010000 00000000 00000000',
      label: '',
      instr: '+LDA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'data2',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '0000F',
      rawCodeHex: '190003  ',
      rawCodeBinary: '00011001 00000000 00000011',
      label: '',
      instr: 'ADD',
      instrHex: '0x18',
      instrBin: '000110',
      nixbpe: '010000',
      operand: '#3',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00012',
      rawCodeHex: '0F100000',
      rawCodeBinary: '00001111 00010000 00000000 00000000',
      label: '',
      instr: '+STA',
      instrHex: '',
      instrBin: '',
      nixbpe: '110001',
      operand: 'data2',
      comment: '',
      labelWidth: 4,
      nameWidth: 7,
      isCommentRow: false,
    },
    {
      addressHex: '00016',
      rawCodeHex: '0F2003  ',
      rawCodeBinary: '00001111 00100000 00000011',
      label: '',
      instr: 'STA',
      instrHex: '0x0C',
      instrBin: '000011',
      nixbpe: '110010',
      operand: 'ref1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00019',
      rawCodeHex: '4F0000  ',
      rawCodeBinary: '01001111 00000000 00000000',
      label: '',
      instr: 'RSUB',
      instrHex: '0x4C',
      instrBin: '010011',
      nixbpe: '110000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment:
        'This is a very long comment to test the horizontal scroll bar. It should extend beyond the normal table width.',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '0001C',
      rawCodeHex: '000001  ',
      rawCodeBinary: '00000000 00000000 00000001',
      label: 'ref1',
      instr: 'WORD',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment: '',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: 'neki',
      instr: 'CSECT',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '1B0000  ',
      rawCodeBinary: '00011011 00000000 00000000',
      label: '',
      instr: 'ADD',
      instrHex: '0x18',
      instrBin: '000110',
      nixbpe: '110000',
      operand: '0',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00003',
      rawCodeHex: '1B0000  ',
      rawCodeBinary: '00011011 00000000 00000000',
      label: '',
      instr: 'ADD',
      instrHex: '0x18',
      instrBin: '000110',
      nixbpe: '110000',
      operand: '0',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00006',
      rawCodeHex: '4F0000  ',
      rawCodeBinary: '01001111 00000000 00000000',
      label: '',
      instr: 'RSUB',
      instrHex: '0x4C',
      instrBin: '010011',
      nixbpe: '110000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment: '',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: 'data',
      instr: 'CSECT',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTDEF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'data1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00000',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'EXTDEF',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'data2',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '',
      rawCodeHex: '',
      rawCodeBinary: '',
      label: '',
      instr: '',
      instrHex: '',
      instrBin: '',
      nixbpe: '',
      operand: '',
      comment: '',
      labelWidth: 0,
      nameWidth: 0,
      isCommentRow: true,
    },
    {
      addressHex: '00000',
      rawCodeHex: '000000  ',
      rawCodeBinary: '00000000 00000000 00000000',
      label: 'data1',
      instr: 'RESW',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00003',
      rawCodeHex: '000000  ',
      rawCodeBinary: '00000000 00000000 00000000',
      label: 'data2',
      instr: 'RESW',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: '1',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
    {
      addressHex: '00012',
      rawCodeHex: '        ',
      rawCodeBinary: '',
      label: '',
      instr: 'END',
      instrHex: '',
      instrBin: '',
      nixbpe: '000000',
      operand: 'func',
      comment: '',
      labelWidth: 5,
      nameWidth: 6,
      isCommentRow: false,
    },
  ],
};

export default function ListContainer() {
  const { tabs, activeTabIdx } = useEditorTabStore();
  const activeTab = tabs[activeTabIdx];
  const [listViewData, setListViewData] = useState<ListViewItem[]>([]);
  const [breakpoints, setBreakpoints] = useState<Set<number>>(new Set());

  useEffect(() => {
    if (activeTab?.filePath?.endsWith('.lst')) {
      setListViewData(dummyJsonData.listViewArray);
    } else {
      setListViewData([]);
    }
  }, [activeTab]);

  const toggleBreakpoint = (index: number) => {
    setBreakpoints(prev => {
      const newBreakpoints = new Set(prev);
      if (newBreakpoints.has(index)) {
        newBreakpoints.delete(index);
      } else {
        newBreakpoints.add(index);
      }
      return newBreakpoints;
    });
  };

  return (
    <div className="flex flex-col flex-1 w-full h-full">
      <TabBar />
      <List
        data={listViewData}
        activeTabTitle={activeTab?.title}
        breakpoints={breakpoints}
        onBreakpointToggle={toggleBreakpoint}
      />
    </div>
  );
}
